<feed xmlns="http://www.w3.org/2005/Atom"><title>The Go Programming Language Blog</title><id>tag:blog.golang.org,2013:blog.golang.org</id><link rel="self" href="https://blog.golang.org/feed.atom"></link><updated>2020-10-20T11:00:00+00:00</updated><entry><title>Announcing the 2020 Go Developer Survey</title><id>tag:blog.golang.org,2013:blog.golang.org/survey2020</id><link rel="alternate" href="https://blog.golang.org/survey2020"></link><published>2020-10-20T11:00:00+00:00</published><updated>2020-10-20T11:00:00+00:00</updated><author><name>Alice Merrick</name></author><summary type="html"></summary><content type="html">&#xA;  &#xA;  &#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_1.&#34;&gt;Help shape the future of Go&lt;/h4&gt;&#xA;  &lt;p&gt;Since 2016, thousands of Gophers around the world have helped the Go project&#xA;by sharing their thoughts via our annual Go Developer Survey.&#xA;Your feedback has played an enormous role in driving changes to our language,&#xA;ecosystem, and community, including the gopls language server,&#xA;the latest generics draft, the module mirror, and so much more.&#xA;And of course, we publicly share &lt;a href=&#34;https://blog.golang.org/survey2019-results&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;each year&#39;s results&lt;/a&gt;,&#xA;so we can all benefit from the community&#39;s insights.&lt;/p&gt;&#xA;&lt;p&gt;This year we’ve streamlined the survey to shorten the time it takes to&#xA;complete and improved the survey’s accessibility.&#xA;The specific questions each person will see are randomly selected,&#xA;so folks who’ve taken the survey in prior years may not see all of the&#xA;questions they are used to.&#xA;Rest assured that they are still there. This approach allows us to ask about&#xA;a wider variety of topics than in prior years while also reducing the survey’s length.&lt;/p&gt;&#xA;&lt;p&gt;Today we are launching the 2020 Go Developer Survey.&#xA;We&#39;d love to hear from everyone who uses Go,&#xA;used to use Go, or is interested in using Go,&#xA;to help ensure the language, community, and ecosystem fit the needs of the&#xA;people closest to it.&#xA;Please help us shape Go&#39;s future by participating in this 10-minute survey by November 8th:&#xA;&lt;a href=&#34;https://google.qualtrics.com/jfe/form/SV_1O0A5f70Q38dlVr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Take the 2020 Go Developer Survey&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_2.&#34;&gt;Spread the word!&lt;/h4&gt;&#xA;  &lt;p&gt;We need as many Gophers as possible to participate in this survey to help&#xA;us better understand our global user base.&#xA;We&#39;d be grateful if you would spread the word by sharing this post on your&#xA;social network feeds,&#xA;around the office, at virtual meet-ups, and in other communities. Thank you!&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;  &#xA;</content></entry><entry><title>Go 1.15 is released</title><id>tag:blog.golang.org,2013:blog.golang.org/go1.15</id><link rel="alternate" href="https://blog.golang.org/go1.15"></link><published>2020-08-11T11:00:00+00:00</published><updated>2020-08-11T11:00:00+00:00</updated><author><name>Alex Rakoczy</name></author><summary type="html"></summary><content type="html">&#xA;  &#xA;  &#xA;    &#xA;      &#xA;        &lt;p&gt;Today the Go team is very happy to announce the release of Go 1.15. You can get it from the &lt;a href=&#34;https://golang.org/dl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;download page&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Some of the highlights include:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/go1.15#linker&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Substantial improvements to the Go linker&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/go1.15#runtime&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Improved allocation for small objects at high core counts&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/go1.15#commonname&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;X.509 CommonName deprecation&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/go1.15#go-command&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GOPROXY supports skipping proxies that return errors&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/go1.15#time/tzdata&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;New embedded tzdata package&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/go1.15#library&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A number of Core Library improvements&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For the complete list of changes and more information about the improvements above, see the &lt;a href=&#34;https://golang.org/doc/go1.15&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Go 1.15 release notes&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;We want to thank everyone who contributed to this release by writing code, filing bugs, providing feedback, and/or testing the beta and release candidates.&#xA;Your contributions and diligence helped to ensure that Go 1.15 is as stable as possible.&#xA;That said, if you notice any problems, please &lt;a href=&#34;https://golang.org/issue/new&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;We hope you enjoy the new release!&lt;/p&gt;&#xA;&#xA;      &#xA;    &#xA;  &#xA;</content></entry><entry><title>Keeping Your Modules Compatible</title><id>tag:blog.golang.org,2013:blog.golang.org/module-compatibility</id><link rel="alternate" href="https://blog.golang.org/module-compatibility"></link><published>2020-07-07T11:00:00+00:00</published><updated>2020-07-07T11:00:00+00:00</updated><author><name>Jean de Klerk and Jonathan Amsterdam</name></author><summary type="html"></summary><content type="html">&#xA;  &#xA;  &#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_1.&#34;&gt;Introduction&lt;/h4&gt;&#xA;  &lt;p&gt;This post is part 5 in a series.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Part 1 — &lt;a href=&#34;/using-go-modules&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Using Go Modules&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Part 2 — &lt;a href=&#34;/migrating-to-go-modules&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Migrating To Go Modules&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Part 3 — &lt;a href=&#34;/publishing-go-modules&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Publishing Go Modules&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Part 4 — &lt;a href=&#34;/v2-go-modules&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go Modules: v2 and Beyond&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Part 5 — Keeping Your Modules Compatible&lt;/strong&gt; (this post)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Your modules will evolve over time as you add new features, change behaviors, and reconsider parts of the module&#39;s public surface. As discussed in &lt;a href=&#34;/v2-go-modules&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go Modules: v2 and Beyond&lt;/a&gt;, breaking changes to a v1+ module must happen as part of a major version bump (or by adopting a new module path).&lt;/p&gt;&#xA;&lt;p&gt;However, releasing a new major version is hard on your users. They have to find the new version, learn a new API, and change their code. And some users may never update, meaning you have to maintain two versions for your code forever. So it is usually better to change your existing package in a compatible way.&lt;/p&gt;&#xA;&lt;p&gt;In this post, we&#39;ll explore some techniques for introducing non-breaking changes. The common theme is: add, don’t change or remove. We’ll also talk about how to design your API for compatibility from the outset.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_2.&#34;&gt;Adding to a function&lt;/h4&gt;&#xA;  &lt;p&gt;Often, breaking changes come in the form of new arguments to a function. We’ll describe some ways to deal with this sort of change, but first let’s look at a technique that doesn’t work.&lt;/p&gt;&#xA;&lt;p&gt;When adding new arguments with sensible defaults, it’s tempting to add them as a variadic parameter. To extend the function&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;func Run(name string)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;with an additional &lt;code&gt;size&lt;/code&gt; argument which defaults to zero, one might propose&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;func Run(name string, size ...int)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;on the grounds that all existing call sites will continue to work. While that is true, other uses of &lt;code&gt;Run&lt;/code&gt; could break, like this one:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;package mypkg&#xA;var runner func(string) = yourpkg.Run&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The original &lt;code&gt;Run&lt;/code&gt; function works here because its type is &lt;code&gt;func(string)&lt;/code&gt;, but the new &lt;code&gt;Run&lt;/code&gt; function’s type is &lt;code&gt;func(string, ...int)&lt;/code&gt;, so the assignment fails at compile time.&lt;/p&gt;&#xA;&lt;p&gt;This example illustrates that call compatibility is not enough for backward compatibility. There is, in fact, no backward-compatible change you can make to a function’s signature.&lt;/p&gt;&#xA;&lt;p&gt;Instead of changing a function’s signature, add a new function. As an example, after the &lt;code&gt;context&lt;/code&gt; package was introduced, it became common practice to pass a &lt;code&gt;context.Context&lt;/code&gt; as the first argument to a function. However, stable APIs could not change an exported function to accept a &lt;code&gt;context.Context&lt;/code&gt; because it would break all uses of that function.&lt;/p&gt;&#xA;&lt;p&gt;Instead, new functions were added. For example, the &lt;code&gt;database/sql&lt;/code&gt; package&#39;s &lt;code&gt;Query&lt;/code&gt; method’s signature was (and still is)&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;func (db *DB) Query(query string, args ...interface{}) (*Rows, error)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;When the &lt;code&gt;context&lt;/code&gt; package was created, the Go team added a new method to &lt;code&gt;database/sql&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;func (db *DB) QueryContext(ctx context.Context, query string, args ...interface{}) (*Rows, error)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;To avoid copying code, the old method calls the new one:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;func (db *DB) Query(query string, args ...interface{}) (*Rows, error) {&#xA;    return db.QueryContext(context.Background(), query, args...)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Adding a method allows users to migrate to the new API at their own pace. Since the methods read similarly and sort together, and &lt;code&gt;Context&lt;/code&gt; is in the name of the new method, this extension of the &lt;code&gt;database/sql&lt;/code&gt; API did not degrade readability or comprehension of the package.&lt;/p&gt;&#xA;&lt;p&gt;If you anticipate that a function may need more arguments in the future, you can plan ahead by making optional arguments a part of the function’s signature. The simplest way to do that is to add a single struct argument, as the &lt;a href=&#34;https://pkg.go.dev/crypto/tls?tab=doc#Dial&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;crypto/tls.Dial&lt;/a&gt; function does:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;func Dial(network, addr string, config *Config) (*Conn, error)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The TLS handshake conducted by &lt;code&gt;Dial&lt;/code&gt; requires a network and address, but it has many other parameters with reasonable defaults. Passing a &lt;code&gt;nil&lt;/code&gt; for &lt;code&gt;config&lt;/code&gt; uses those defaults; passing a &lt;code&gt;Config&lt;/code&gt; struct with some fields set will override the defaults for those fields. In the future, adding a new TLS configuration parameter only requires a new field on the &lt;code&gt;Config&lt;/code&gt; struct, a change that is backward-compatible (almost always—see &amp;quot;Maintaining struct compatibility&amp;quot; below).&lt;/p&gt;&#xA;&lt;p&gt;Sometimes the techniques of adding a new function and adding options can be combined by making the options struct a method receiver. Consider the evolution of the &lt;code&gt;net&lt;/code&gt; package’s ability to listen at a network address. Prior to Go 1.11, the &lt;code&gt;net&lt;/code&gt; package provided only a &lt;code&gt;Listen&lt;/code&gt; function with the signature&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;func Listen(network, address string) (Listener, error)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;For Go 1.11, two features were added to &lt;code&gt;net&lt;/code&gt; listening: passing a context, and allowing the caller to provide a “control function” to adjust the raw connection after creation but before binding. The result could have been a new function that took a context, network, address and control function. Instead, the package authors added a  &lt;a href=&#34;https://pkg.go.dev/net@go1.11?tab=doc#ListenConfig&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;ListenConfig&lt;/code&gt;&lt;/a&gt; struct in anticipation that more options might be needed someday. And rather than define a new top-level function with a cumbersome name, they added a &lt;code&gt;Listen&lt;/code&gt; method to &lt;code&gt;ListenConfig&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;type ListenConfig struct {&#xA;    Control func(network, address string, c syscall.RawConn) error&#xA;}&#xA;&#xA;func (*ListenConfig) Listen(ctx context.Context, network, address string) (Listener, error)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Another way to provide new options in the future is the “Option types” pattern, where options are passed as variadic arguments, and each option is a function that changes the state of the value being constructed. They are described in more detail by Rob Pike&#39;s post &lt;a href=&#34;https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Self-referential functions and the design of options&lt;/a&gt;. One widely used example is &lt;a href=&#34;https://pkg.go.dev/google.golang.org/grpc?tab=doc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;google.golang.org/grpc&lt;/a&gt;&#39;s &lt;a href=&#34;https://pkg.go.dev/google.golang.org/grpc?tab=doc#DialOption&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DialOption&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Option types fulfill the same role as struct options in function arguments: they are an extensible way to pass behavior-modifying configuration. Deciding which to choose is largely a matter of style. Consider this simple usage of gRPC&#39;s &lt;code&gt;DialOption&lt;/code&gt; option type:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;grpc.Dial(&amp;quot;some-target&amp;quot;,&#xA;  grpc.WithAuthority(&amp;quot;some-authority&amp;quot;),&#xA;  grpc.WithMaxDelay(time.Second),&#xA;  grpc.WithBlock())&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This could also have been implemented as a struct option:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;notgrpc.Dial(&amp;quot;some-target&amp;quot;, &amp;amp;notgrpc.Options{&#xA;  Authority: &amp;quot;some-authority&amp;quot;,&#xA;  MaxDelay:  time.Minute,&#xA;  Block:     true,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Functional options have some downsides: they require writing the package name before the option for each call; they increase the size of the package namespace; and it&#39;s unclear what the behavior should be if the same option is provided twice. On the other hand, functions which take option structs require a parameter which might almost always be &lt;code&gt;nil&lt;/code&gt;, which some find unattractive. And when a type’s zero value has a valid meaning, it is clumsy to specify that the option should have its default value, typically requiring a pointer or an additional boolean field.&lt;/p&gt;&#xA;&lt;p&gt;Either one is a reasonable choice for ensuring future extensibility of your module&#39;s public API.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_3.&#34;&gt;Working with interfaces&lt;/h4&gt;&#xA;  &lt;p&gt;Sometimes, new features require changes to publicly-exposed interfaces: for example, an interface needs to be extended with new methods. Directly adding to an interface is a breaking change, though—how, then, can we support new methods on a publicly-exposed interface?&lt;/p&gt;&#xA;&lt;p&gt;The basic idea is to define a new interface with the new method, and then wherever the old interface is used, dynamically check whether the provided type is the older type or the newer type.&lt;/p&gt;&#xA;&lt;p&gt;Let&#39;s illustrate this with an example from the &lt;a href=&#34;https://pkg.go.dev/archive/tar?tab=doc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;archive/tar&lt;/code&gt;&lt;/a&gt; package. &lt;a href=&#34;https://pkg.go.dev/archive/tar?tab=doc#NewReader&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;tar.NewReader&lt;/code&gt;&lt;/a&gt; accepts an &lt;code&gt;io.Reader&lt;/code&gt;, but over time the Go team realized that it would be more efficient to skip from one file header to the next if you could call &lt;a href=&#34;https://pkg.go.dev/io?tab=doc#Seeker&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;Seek&lt;/code&gt;&lt;/a&gt;. But, they could not add a &lt;code&gt;Seek&lt;/code&gt; method to &lt;code&gt;io.Reader&lt;/code&gt;: that would break all implementers of &lt;code&gt;io.Reader&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Another ruled-out option was to change &lt;code&gt;tar.NewReader&lt;/code&gt; to accept &lt;a href=&#34;https://pkg.go.dev/io?tab=doc#ReadSeeker&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;io.ReadSeeker&lt;/code&gt;&lt;/a&gt; rather than &lt;code&gt;io.Reader&lt;/code&gt;, since it supports both &lt;code&gt;io.Reader&lt;/code&gt; methods and &lt;code&gt;Seek&lt;/code&gt; (by way of &lt;code&gt;io.Seeker&lt;/code&gt;). But, as we saw above, changing a function signature is also a breaking change.&lt;/p&gt;&#xA;&lt;p&gt;So, they decided to keep &lt;code&gt;tar.NewReader&lt;/code&gt; signature unchanged, but type check for (and support) &lt;code&gt;io.Seeker&lt;/code&gt; in &lt;code&gt;tar.Reader&lt;/code&gt; methods:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;package tar&#xA;&#xA;type Reader struct {&#xA;  r io.Reader&#xA;}&#xA;&#xA;func NewReader(r io.Reader) *Reader {&#xA;  return &amp;amp;Reader{r: r}&#xA;}&#xA;&#xA;func (r *Reader) Read(b []byte) (int, error) {&#xA;  if rs, ok := r.r.(io.Seeker); ok {&#xA;    // Use more efficient rs.Seek.&#xA;  }&#xA;  // Use less efficient r.r.Read.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;(See &lt;a href=&#34;https://github.com/golang/go/blob/60f78765022a59725121d3b800268adffe78bde3/src/archive/tar/reader.go#L837&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;reader.go&lt;/a&gt; for the actual code.)&lt;/p&gt;&#xA;&lt;p&gt;When you run into a case where you want to add a method to an existing interface, you may be able to follow this strategy. Start by creating a new interface with your new method, or identify an existing interface with the new method. Next, identify the relevant functions that need to support it, type check for the second interface, and add code that uses it.&lt;/p&gt;&#xA;&lt;p&gt;This strategy only works when the old interface without the new method can still be supported, limiting the future extensibility of your module.&lt;/p&gt;&#xA;&lt;p&gt;Where possible, it is better to avoid this class of problem entirely. When designing constructors, for example, prefer to return concrete types. Working with concrete types allows you to add methods in the future without breaking users, unlike interfaces. That property allows your module to be extended more easily in the future.&lt;/p&gt;&#xA;&lt;p&gt;Tip: if you do need to use an interface but don&#39;t intend for users to implement it, you can add an unexported method. This prevents types defined outside your package from satisfying your interface without embedding, freeing you to add methods later without breaking user implementations. For example, see &lt;a href=&#34;https://github.com/golang/go/blob/83b181c68bf332ac7948f145f33d128377a09c42/src/testing/testing.go#L564-L567&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;testing.TB&lt;/code&gt;&#39;s &lt;code&gt;private()&lt;/code&gt; function&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;type TB interface {&#xA;    Error(args ...interface{})&#xA;    Errorf(format string, args ...interface{})&#xA;    // ...&#xA;&#xA;    // A private method to prevent users implementing the&#xA;    // interface and so future additions to it will not&#xA;    // violate Go 1 compatibility.&#xA;    private()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This topic is also explored in more detail in Jonathan Amsterdam&#39;s &amp;quot;Detecting Incompatible API Changes&amp;quot; talk (&lt;a href=&#34;https://www.youtube.com/watch?v=JhdL5AkH-AQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;video&lt;/a&gt;, &lt;a href=&#34;https://github.com/gophercon/2019-talks/blob/master/JonathanAmsterdam-DetectingIncompatibleAPIChanges/slides.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;slides&lt;/a&gt;).&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_4.&#34;&gt;Add configuration methods&lt;/h4&gt;&#xA;  &lt;p&gt;So far we&#39;ve talked about overt breaking changes, where changing a type or a function would cause users&#39; code to stop compiling. However, behavior changes can also break users, even if user code continues to compile. For example, many users expect &lt;a href=&#34;https://pkg.go.dev/encoding/json?tab=doc#Decoder&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;json.Decoder&lt;/code&gt;&lt;/a&gt; to ignore fields in the JSON that are not in the argument struct. When the Go team wanted to return an error in that case, they had to be careful. Doing so without an opt-in mechanism would mean that the many users relying on those methods might start receiving errors where they hadn’t before.&lt;/p&gt;&#xA;&lt;p&gt;So, rather than changing the behavior for all users, they added a configuration method to the &lt;code&gt;Decoder&lt;/code&gt; struct: &lt;a href=&#34;https://pkg.go.dev/encoding/json?tab=doc#Decoder.DisallowUnknownFields&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;Decoder.DisallowUnknownFields&lt;/code&gt;&lt;/a&gt;. Calling this method opts a user in to the new behavior, but not doing so preserves the old behavior for existing users.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_5.&#34;&gt;Maintaining struct compatibility&lt;/h4&gt;&#xA;  &lt;p&gt;We saw above that any change to a function’s signature is a breaking change. The situation is much better with structs. If you have an exported struct type, you can almost always add a field or remove an unexported field without breaking compatibility. When adding a field, make sure that its zero value is meaningful and preserves the old behavior, so that existing code that doesn’t set the field continues to work.&lt;/p&gt;&#xA;&lt;p&gt;Recall that the authors of the &lt;code&gt;net&lt;/code&gt; package added &lt;code&gt;ListenConfig&lt;/code&gt; in Go 1.11 because they thought more options might be forthcoming. Turns out they were right. In Go 1.13, the &lt;a href=&#34;https://pkg.go.dev/net@go1.13?tab=doc#ListenConfig&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;KeepAlive&lt;/code&gt; field&lt;/a&gt; was added to allow for disabling keep-alive or changing its period. The default value of zero preserves the original behavior of enabling keep-alive with a default period.&lt;/p&gt;&#xA;&lt;p&gt;There is one subtle way a new field can break user code unexpectedly. If all the field types in a struct are comparable—meaning values of those types can be compared with &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt; and used as a map key—then the overall struct type is comparable too. In this case, adding a new field of uncomparable type will make the overall struct type non-comparable, breaking any code that compares values of that struct type.&lt;/p&gt;&#xA;&lt;p&gt;To keep a struct comparable, don’t add non-comparable fields to it. You can write a test for that, or rely on the upcoming &lt;a href=&#34;https://pkg.go.dev/golang.org/x/exp/cmd/gorelease?tab=doc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gorelease&lt;/a&gt; tool to catch it.&lt;/p&gt;&#xA;&lt;p&gt;To prevent comparison in the first place, make sure the struct has a non-comparable field. It may have one already—no slice, map or function type is comparable—but if not, one can be added like so:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;type Point struct {&#xA;        _ [0]func()&#xA;        X int&#xA;        Y int&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The &lt;code&gt;func()&lt;/code&gt; type is not comparable, and the zero-length array takes up no space. We can define a type to clarify our intent:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;type doNotCompare [0]func()&#xA;&#xA;type Point struct {&#xA;        doNotCompare&#xA;        X int&#xA;        Y int&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Should you use &lt;code&gt;doNotCompare&lt;/code&gt; in your structs? If you’ve defined the struct to be used as a pointer—that is, it has pointer methods and perhaps a &lt;code&gt;NewXXX&lt;/code&gt; constructor function that returns a pointer—then adding a &lt;code&gt;doNotCompare&lt;/code&gt; field is probably overkill. Users of a pointer type understand that each value of the type is distinct: that if they want to compare two values, they should compare the pointers.&lt;/p&gt;&#xA;&lt;p&gt;If you are defining a struct intended to be used as a value directly, like our &lt;code&gt;Point&lt;/code&gt; example, then quite often you want it to be comparable. In the uncommon case that you have a value struct that you don’t want compared, then adding a &lt;code&gt;doNotCompare&lt;/code&gt; field will give you the freedom to change the struct later without having to worry about breaking comparisons. On the downside, the type won’t be usable as a map key.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_6.&#34;&gt;Conclusion&lt;/h4&gt;&#xA;  &lt;p&gt;When planning an API from scratch, consider carefully how extensible the API will be to new changes in the future. And when you do need to add new features, remember the rule: add, don&#39;t change or remove, keeping in mind the exceptions—interfaces, function arguments, and return values can&#39;t be added in backwards-compatible ways.&lt;/p&gt;&#xA;&lt;p&gt;If you need to dramatically change an API, or if an API begins to lose its focus as more features are added, then it may be time for a new major version. But most of the time, making a backwards-compatible change is easy and avoids causing pain for your users.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;  &#xA;</content></entry><entry><title>The Next Step for Generics</title><id>tag:blog.golang.org,2013:blog.golang.org/generics-next-step</id><link rel="alternate" href="https://blog.golang.org/generics-next-step"></link><published>2020-06-16T11:00:00+00:00</published><updated>2020-06-16T11:00:00+00:00</updated><author><name>Ian Lance Taylor and Robert Griesemer</name></author><summary type="html"></summary><content type="html">&#xA;  &#xA;  &#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_1.&#34;&gt;Introduction&lt;/h4&gt;&#xA;  &lt;p&gt;It’s been almost a year since we &lt;a href=&#34;https://blog.golang.org/why-generics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;last wrote about the possibility of&#xA;adding generics to Go&lt;/a&gt;.&#xA;It’s time for an update.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_2.&#34;&gt;Updated design&lt;/h4&gt;&#xA;  &lt;p&gt;We’ve been continuing to refine the &lt;a href=&#34;https://go.googlesource.com/proposal/+/refs/heads/master/design/go2draft-contracts.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;generics design&#xA;draft&lt;/a&gt;.&#xA;We’ve written a type checker for it: a program that can parse Go code&#xA;that uses generics as described in the design draft and report any&#xA;type errors.&#xA;We’ve written example code.&#xA;And we’ve collected feedback from many, many people—thanks for&#xA;providing it!&lt;/p&gt;&#xA;&lt;p&gt;Based on what we’ve learned, we’re releasing an &lt;a href=&#34;https://go.googlesource.com/proposal/+/refs/heads/master/design/go2draft-type-parameters.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;updated design&#xA;draft&lt;/a&gt;.&#xA;The biggest change is that we are dropping the idea of contracts.&#xA;The difference between contracts and interface types was confusing, so&#xA;we’re eliminating that difference.&#xA;Type parameters are now constrained by interface types.&#xA;Interface types are now permitted to include type lists, though only&#xA;when used as constraints; in the previous design draft type lists were&#xA;a feature of contracts.&#xA;More complex cases will use a parameterized interface type.&lt;/p&gt;&#xA;&lt;p&gt;We hope that people will find this design draft simpler and easier to&#xA;understand.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_3.&#34;&gt;Experimentation tool&lt;/h4&gt;&#xA;  &lt;p&gt;To help decide how to further refine the design draft, we are&#xA;releasing a translation tool.&#xA;This is a tool that permits people to type check and run code written&#xA;using the version of generics described in the design draft.&#xA;It works by translating generic code into ordinary Go code.&#xA;This translation process imposes some limitations, but we hope that it&#xA;will be good enough for people to get a feel for what generic Go code&#xA;might look like.&#xA;The real implementation of generics, if they are accepted into the&#xA;language, will work differently.&#xA;(We have only just begun to sketch out what a direct compiler&#xA;implementation would look like.)&lt;/p&gt;&#xA;&lt;p&gt;The tool is available on a variant of the Go playground at&#xA;&lt;a href=&#34;https://go2goplay.golang.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://go2goplay.golang.org&lt;/a&gt;.&#xA;This playground works just like the usual Go playground, but it&#xA;supports generic code.&lt;/p&gt;&#xA;&lt;p&gt;You can also build and use the tool yourself.&#xA;It is available in a branch of the master Go repo.&#xA;Follow the &lt;a href=&#34;https://golang.org/doc/install/source&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;instructions on installing Go from&#xA;source&lt;/a&gt;.&#xA;Where those instructions direct you to check out the latest release&#xA;tag, instead run &lt;code&gt;git checkout dev.go2go&lt;/code&gt;.&#xA;Then build the Go toolchain as directed.&lt;/p&gt;&#xA;&lt;p&gt;The translation tool is documented in&#xA;&lt;a href=&#34;https://go.googlesource.com/go/+/refs/heads/dev.go2go/README.go2go.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;README.go2go&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_4.&#34;&gt;Next steps&lt;/h4&gt;&#xA;  &lt;p&gt;We hope that the tool will give the Go community a chance to&#xA;experiment with generics.&#xA;There are two main things that we hope to learn.&lt;/p&gt;&#xA;&lt;p&gt;First, does generic code make sense?&#xA;Does it feel like Go?&#xA;What surprises do people encounter?&#xA;Are the error messages useful?&lt;/p&gt;&#xA;&lt;p&gt;Second, we know that many people have said that Go needs generics, but&#xA;we don’t necessarily know exactly what that means.&#xA;Does this draft design address the problem in a useful way?&#xA;If there is a problem that makes you think “I could solve this if Go&#xA;had generics,” can you solve the problem when using this tool?&lt;/p&gt;&#xA;&lt;p&gt;We will use the feedback we gather from the Go community to decide how&#xA;to move forward.&#xA;If the draft design is well received and doesn’t need significant&#xA;changes, the next step would be a &lt;a href=&#34;https://golang.org/s/proposal&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;formal language change&#xA;proposal&lt;/a&gt;.&#xA;To set expectations, if everybody is completely happy with the design&#xA;draft and it does not require any further adjustments, the earliest&#xA;that generics could be added to Go would be the Go 1.17 release,&#xA;scheduled for August 2021.&#xA;In reality, of course, there may be unforeseen problems, so this is an&#xA;optimistic timeline; we can’t make any definite prediction.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_5.&#34;&gt;Feedback&lt;/h4&gt;&#xA;  &lt;p&gt;The best way to provide feedback for the language changes will be on&#xA;the mailing list &lt;code&gt;golang-nuts@googlegroups.com&lt;/code&gt;.&#xA;Mailing lists are imperfect, but they seem like our best option for&#xA;initial discussion.&#xA;When writing about the design draft, please put &lt;code&gt;[generics]&lt;/code&gt; at the&#xA;start of the Subject line and to start different threads for different&#xA;specific topics.&lt;/p&gt;&#xA;&lt;p&gt;If you find bugs in the generics type checker or the translation tool,&#xA;they should be filed in the standard Go issue tracker at&#xA;&lt;a href=&#34;https://golang.org/issue&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://golang.org/issue&lt;/a&gt;.&#xA;Please start the issue title with &lt;code&gt;cmd/go2go:&lt;/code&gt;.&#xA;Note that the issue tracker is not the best place to discuss changes&#xA;to the language, because it does not provide threading and it is not&#xA;well suited to lengthy conversations.&lt;/p&gt;&#xA;&lt;p&gt;We look forward to your feedback.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_6.&#34;&gt;Acknowledgements&lt;/h4&gt;&#xA;  &lt;p&gt;We’re not finished, but we’ve come a long way.&#xA;We would not be here without a lot of help.&lt;/p&gt;&#xA;&lt;p&gt;We’d like to thank Philip Wadler and his collaborators for thinking&#xA;formally about generics in Go and helping us clarify the theoretical&#xA;aspects of the design.&#xA;Their paper &lt;a href=&#34;https://arxiv.org/abs/2005.11710&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Featherweight Go&lt;/a&gt;&#xA;analyzes generics in a restricted version of Go, and they have&#xA;developed a prototype &lt;a href=&#34;https://github.com/rhu1/fgg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;We would also like to thank &lt;a href=&#34;https://go.googlesource.com/proposal/+/refs/heads/master/design/go2draft-type-parameters.md#acknowledgements&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the&#xA;people&lt;/a&gt;&#xA;who provided detailed feedback on an earlier version of the design&#xA;draft.&lt;/p&gt;&#xA;&lt;p&gt;And last but definitely not least, we’d like to thank many people on&#xA;the Go team, many contributors to the Go issue tracker, and everybody&#xA;else who shared ideas and feedback on earlier design drafts.&#xA;We read all of it, and we’re grateful.  We wouldn’t be here without&#xA;you.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;  &#xA;</content></entry><entry><title>Pkg.go.dev is open source!</title><id>tag:blog.golang.org,2013:blog.golang.org/pkgsite</id><link rel="alternate" href="https://blog.golang.org/pkgsite"></link><published>2020-06-15T11:00:00+00:00</published><updated>2020-06-15T11:00:00+00:00</updated><author><name>Julie Qiu</name></author><summary type="html"></summary><content type="html">&#xA;  &#xA;  &#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_1.&#34;&gt;&lt;/h4&gt;&#xA;  &lt;p&gt;We’re excited to announce that the codebase for&#xA;&lt;a href=&#34;https://pkg.go.dev&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pkg.go.dev&lt;/a&gt; is now open source.&lt;/p&gt;&#xA;&lt;p&gt;The repository lives at&#xA;&lt;a href=&#34;https://go.googlesource.com/pkgsite&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;go.googlesource.com/pkgsite&lt;/a&gt;&#xA;and is mirrored to&#xA;&lt;a href=&#34;https://github.com/golang/pkgsite&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github.com/golang/pkgsite&lt;/a&gt;.&#xA;We will continue using the Go issue tracker to track&#xA;&lt;a href=&#34;https://github.com/golang/go/labels/go.dev&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;feedback&lt;/a&gt;&#xA;related to pkg.go.dev.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_2.&#34;&gt;Contributing&lt;/h4&gt;&#xA;  &lt;p&gt;If you are interested in contributing to any&#xA;&lt;a href=&#34;https://github.com/golang/go/labels/go.dev&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;issues related to pkg.go.dev&lt;/a&gt;,&#xA;check out our&#xA;&lt;a href=&#34;https://go.googlesource.com/pkgsite/+/refs/heads/master/CONTRIBUTING.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;contribution guidelines&lt;/a&gt;.&#xA;We also encourage you to continue&#xA;&lt;a href=&#34;https://golang.org/s/discovery-feedback&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;filing issues&lt;/a&gt;&#xA;if you run into problems or have feedback.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_3.&#34;&gt;What’s Next&lt;/h4&gt;&#xA;  &lt;p&gt;We really appreciate all the feedback we’ve received so far. It has been a big&#xA;help in shaping our&#xA;&lt;a href=&#34;https://go.googlesource.com/pkgsite#roadmap&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;roadmap&lt;/a&gt; for the coming year.&#xA;Now that pkg.go.dev is open source, here’s what we’ll be working on next:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;We have some design changes planned for pkg.go.dev,&#xA;to address&#xA;&lt;a href=&#34;https://github.com/golang/go/issues?q=is%3Aissue+is%3Aopen+label%3Ago.dev+label%3AUX&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;UX feedback&lt;/a&gt;&#xA;that we have received. You can expect a more cohesive search and navigation&#xA;experience. We plan to share these designs for feedback once they are ready.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;We know that there are features available on godoc.org that users&#xA;want to see on pkg.go.dev. We’ve been keeping track of them on&#xA;&lt;a href=&#34;https://golang.org/issue/39144&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go issue #39144&lt;/a&gt;,&#xA;and will prioritize adding them in the next few months. We also plan to&#xA;continue improving our license detection algorithm based on feedback.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;We’ll be improving our search experience based on feedback in&#xA;&lt;a href=&#34;https://golang.org/issue/37810&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go issue #37810&lt;/a&gt;,&#xA;to make it easier for users to find the dependencies they are looking for and&#xA;make better decisions around which ones to import.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Thanks for being patient with us in the process of open sourcing pkg.go.dev.&#xA;We’re looking forward to receiving your contributions and working with you on&#xA;the future of the project.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;  &#xA;</content></entry><entry><title>The VS Code Go extension joins the Go project</title><id>tag:blog.golang.org,2013:blog.golang.org/the-vs-code-go-extension-joins-the-go-project</id><link rel="alternate" href="https://blog.golang.org/vscode-go"></link><published>2020-06-09T11:00:00+00:00</published><updated>2020-06-09T11:00:00+00:00</updated><author><name>The Go team</name></author><summary type="html"></summary><content type="html">&#xA;  &#xA;  &#xA;    &#xA;      &#xA;        &lt;p&gt;When the Go project began, “an overarching goal was that Go do more to help the&#xA;working programmer by enabling tooling, automating mundane tasks such as code&#xA;formatting, and removing obstacles to working on large code bases”&#xA;(&lt;a href=&#34;https://golang.org/doc/faq#What_is_the_purpose_of_the_project&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go FAQ&lt;/a&gt;).&#xA;Today, more than a decade later, we continue to be guided by that same goal,&#xA;especially as it pertains to the programmer’s most critical tool: their editor.&lt;/p&gt;&#xA;&lt;p&gt;Throughout the past decade, Go developers have relied on a variety of editors&#xA;and dozens of independently authored tools and plugins. Much of Go’s early&#xA;success can be attributed to the fantastic development tools created by the Go&#xA;community. The&#xA;&lt;a href=&#34;https://github.com/microsoft/vscode-go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VS Code extension for Go&lt;/a&gt;, built using&#xA;many of these tools, is now used by 41 percent of Go developers&#xA;(&lt;a href=&#34;https://blog.golang.org/survey2019-results&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go developer survey&lt;/a&gt;).&lt;/p&gt;&#xA;&lt;p&gt;As the VS Code Go extension grows in popularity and as&#xA;&lt;a href=&#34;https://www.youtube.com/watch?v=EFJfdWzBHwE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the ecosystem expands&lt;/a&gt;, it&#xA;requires&#xA;&lt;a href=&#34;https://twitter.com/ramyanexus/status/1154470078978486272&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;more maintenance and support&lt;/a&gt;.&#xA;Over the past few years, the Go team has collaborated with the VS Code team to&#xA;help the Go extension maintainers. The Go team also began a new initiative to&#xA;improve the tools powering all Go editor extensions, with a focus on supporting&#xA;the&#xA;&lt;a href=&#34;https://microsoft.github.io/language-server-protocol/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Language Server Protocol&lt;/a&gt;&#xA;with &lt;a href=&#34;https://golang.org/s/gopls&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;gopls&lt;/code&gt;&lt;/a&gt; and&#xA;&lt;a href=&#34;https://github.com/go-delve/delve/issues/1515&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the Debug Adapter Protocol with Delve&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Through this collaborative work between the VS Code and Go teams, we realized&#xA;that the Go team is uniquely positioned to evolve the Go development experience&#xA;alongside the Go language.&lt;/p&gt;&#xA;&lt;p&gt;As a result, we’re happy to announce the next phase in the Go team’s&#xA;partnership with the VS Code team: &lt;strong&gt;The VS Code extension for Go is officially&#xA;joining the Go project&lt;/strong&gt;. With this come two critical changes:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;The publisher of the plugin is shifting from &amp;quot;Microsoft&amp;quot; to &amp;quot;Go Team at Google&amp;quot;.&lt;/li&gt;&#xA;&lt;li&gt;The project’s repository is moving to join the rest of the Go project at &lt;a href=&#34;https://github.com/golang/vscode-go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/golang/vscode-go&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;We cannot overstate our gratitude to those who have helped&#xA;build and maintain this beloved extension. We know that innovative ideas and&#xA;features come from you, our users. The Go team’s primary aim as owners of the&#xA;extension is to reduce the burden of maintenance work on the Go community.&#xA;We’ll make sure the builds stay green, the issues get triaged, and the docs get&#xA;updated. Go team members will keep contributors abreast of relevant language&#xA;changes, and we’ll smooth the rough edges between the extension’s different&#xA;dependencies.&lt;/p&gt;&#xA;&lt;p&gt;Please continue to share your thoughts with us by filing&#xA;&lt;a href=&#34;https://github.com/golang/vscode-go/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;issues&lt;/a&gt; and making&#xA;&lt;a href=&#34;https://github.com/golang/vscode-go/blob/master/docs/contributing.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;contributions&lt;/a&gt;&#xA;to the project. The process for contributing will now be the same as for the&#xA;&lt;a href=&#34;https://golang.org/doc/contribute.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rest of the Go project&lt;/a&gt;. Go team&#xA;members will offer general help in the #vscode channel on&#xA;&lt;a href=&#34;https://invite.slack.golangbridge.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gophers Slack&lt;/a&gt;, and we’ve also created&#xA;a #vscode-dev channel to discuss issues and brainstorm ideas with contributors.&lt;/p&gt;&#xA;&lt;p&gt;We’re excited about this new step forward, and we hope you are too.&#xA;By maintaining a major Go editor extension, as well as the Go tooling and&#xA;language, the Go team will be able to provide all Go users, regardless of their&#xA;editor, a more cohesive and refined development experience.&lt;/p&gt;&#xA;&lt;p&gt;As always, our goal remains the same: Every user should have an excellent&#xA;experience writing Go code.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;See the accompanying post from the &lt;a href=&#34;https://aka.ms/go-blog-vscode-202006&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Visual Studio Code team&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;      &#xA;    &#xA;  &#xA;</content></entry><entry><title>Go Developer Survey 2019 Results</title><id>tag:blog.golang.org,2013:blog.golang.org/survey2019-results</id><link rel="alternate" href="https://blog.golang.org/survey2019-results"></link><published>2020-04-20T11:00:00+00:00</published><updated>2020-04-20T11:00:00+00:00</updated><author><name>Todd Kulesza</name></author><summary type="html"></summary><content type="html">&#xA;  &#xA;  &#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_1.&#34;&gt;What a response!&lt;/h4&gt;&#xA;  &lt;p&gt;I want to start with an enormous &lt;strong&gt;thank you&lt;/strong&gt; to the thousands of Go developers&#xA;who participated in this year’s survey.&#xA;For 2019, we saw 10,975 responses, nearly &lt;a href=&#34;https://blog.golang.org/survey2018-results&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;twice as many as last year&lt;/a&gt;!&#xA;On behalf of the rest of the team, I cannot adequately stress how much we&#xA;appreciate you taking the time and effort to tell us about your experiences with Go. Thank you!&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_2.&#34;&gt;A note about prior years&lt;/h4&gt;&#xA;  &lt;p&gt;Sharp-eyed readers may notice that our year-over-year comparisons don’t&#xA;quite square with numbers we’ve shared in the past.&#xA;The reason is that from 2016–2018, we calculated percentages for each&#xA;question using the total number of people who started the survey as the denominator.&#xA;While that’s nice and consistent, it ignores the fact that not everyone&#xA;finishes the survey—up to 40% of participants stop before reaching the final page,&#xA;which meant questions that occurred later in the survey appeared to perform&#xA;worse solely because they were later.&#xA;Thus, this year we’ve recalculated all of our results (including the 2016–2018&#xA;responses shown in this post) to use the number of people who responded&#xA;to a given question as the denominator for that question.&#xA;We’ve included the number of 2019 responses for each chart—in the form&#xA;of &amp;quot;n=[number of respondents]&amp;quot; on the x-axis or in the chart’s legend—to&#xA;give readers a better understanding of the weight of evidence underlying each finding.&lt;/p&gt;&#xA;&lt;p&gt;Similarly, we learned that in prior surveys options that appeared earlier&#xA;in response lists had a disproportionate response rate.&#xA;To address this, we added an element of randomization into the survey.&#xA;Some of our multiple-choice questions have lists of choices with no logical ordering,&#xA;such as &amp;quot;I write the following in Go:&#xA;[list of types of applications]&amp;quot;.&#xA;Previously these choices had been alphabetized,&#xA;but for 2019 they were presented in a random order to each participant.&#xA;This means year-over-year comparison for certain questions are invalid for 2018 → 2019,&#xA;but trends from 2016–2018 are not invalidated.&#xA;You can think of this as setting a more accurate baseline for 2019.&#xA;We retained alphabetical ordering in cases where respondents are likely&#xA;to scan for a particular name,&#xA;such as their preferred editor.&#xA;We explicitly call out which questions this applies to below.&lt;/p&gt;&#xA;&lt;p&gt;A third major change was to improve our analysis of questions with open-ended,&#xA;free-text responses.&#xA;Last year we used machine learning to roughly—but quickly—categorize these responses.&#xA;This year two researchers manually analyzed and categorized these responses,&#xA;allowing for a more granular analysis but preventing valid comparisons with&#xA;last year’s numbers.&#xA;Like the randomization discussed above, the purpose of this change is to&#xA;give us a reliable baseline for 2019 onward.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_3.&#34;&gt;Without further ado…&lt;/h4&gt;&#xA;  &lt;p&gt;This is a long post. Here’s the tl;dr of our major findings:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The demographics of our respondents are similar to Stack Overflow’s survey respondents,&#xA;which increases our confidence that these results are representative of&#xA;the larger Go developer audience.&lt;/li&gt;&#xA;&lt;li&gt;A majority of respondents use Go every day, and this number has been trending up each year.&lt;/li&gt;&#xA;&lt;li&gt;Go’s use is still concentrated in technology companies,&#xA;but Go is increasingly found in a wider variety of industries,&#xA;such as finance and media.&lt;/li&gt;&#xA;&lt;li&gt;Methodology changes showed us that most of our year-over-year metrics&#xA;are stable and higher than we previously realized.&lt;/li&gt;&#xA;&lt;li&gt;Respondents are using Go to solve similar problems,&#xA;particularly building API/RPC services and CLIs,&#xA;regardless of the size of organization they work at.&lt;/li&gt;&#xA;&lt;li&gt;Most teams try to update to the latest Go release quickly;&#xA;when third-party providers are late to support the current Go release,&#xA;this creates an adoption blocker for developers.&lt;/li&gt;&#xA;&lt;li&gt;Almost everyone in the Go ecosystem is now using modules, but some confusion around package management remains.&lt;/li&gt;&#xA;&lt;li&gt;High-priority areas for improvement include improving the developer experience for debugging,&#xA;working with modules, and working with cloud services.&lt;/li&gt;&#xA;&lt;li&gt;VS Code and GoLand have continued to see increased use; they’re now preferred by 3 out of 4 respondents.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_4.&#34;&gt;Who did we hear from?&lt;/h4&gt;&#xA;  &lt;p&gt;This year we asked some new demographic questions to help us better understand&#xA;the people who’ve responded to this survey.&#xA;In particular, we asked about the duration of professional programming experience&#xA;and the size of the organizations where people work.&#xA;These were modeled on questions that StackOverflow asks in their annual survey,&#xA;and the distribution of responses we saw is very close to StackOverflow’s 2019 results.&#xA;Our take-away is the respondents to this survey have similar levels of professional&#xA;experience and proportional representation of different sizes of organizations&#xA;as the StackOverflow survey audience (with the obvious difference that we’re&#xA;primarily hearing from developers working with Go).&#xA;That increases our confidence when generalizing these findings to the estimated&#xA;1 million Go developers worldwide.&#xA;These demographic questions will also help us in the future to identify&#xA;which year-over-year changes may be the result of a shift in who responded to the survey,&#xA;rather than changes in sentiment or behavior.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig1.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig2.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;Looking at Go experience, we see that a majority of respondents (56%) are&#xA;relatively new to Go,&#xA;having used it for less than two years.&#xA;Majorities also said they use Go at work (72%) and outside of work (62%).&#xA;The percentage of respondents using Go professionally appears to be trending up each year.&lt;/p&gt;&#xA;&lt;p&gt;As you can see in the chart below, in 2018 we saw a spike in these numbers,&#xA;but that increase disappeared this year.&#xA;This is one of many signals suggesting that the audience who answered the&#xA;survey in 2018 was significantly different than in the other three years.&#xA;In this case they were significantly more likely to be using Go outside&#xA;of work and a different language while at work,&#xA;but we see similar outliers across multiple survey questions.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig3.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig4.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;Respondents who have been using Go the longest have different backgrounds&#xA;than newer Go developers.&#xA;These Go veterans were more likely to claim expertise in C/C++ and less&#xA;likely to claim expertise in JavaScript,&#xA;TypeScript, and PHP.&#xA;One caveat is that this is self-reported &amp;quot;expertise&amp;quot;;&#xA;it may be more helpful to think of it instead as &amp;quot;familiarity&amp;quot;.&#xA;Python appears to be the language (other than Go) familiar to the most respondents,&#xA;regardless of how long they’ve been working with Go.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig5.svg&#34; width=&#34;750&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;Last year we asked about which industries respondents work in,&#xA;finding that a majority reported working in software,&#xA;internet, or web service companies.&#xA;This year it appears respondents represent a broader range of industries.&#xA;However, we also simplified the list of industries to reduce confusion from&#xA;potentially overlapping categories (e.g.,&#xA;the separate categories for &amp;quot;Software&amp;quot; and &amp;quot;Internet / web services&amp;quot; from&#xA;2018 were combined into &amp;quot;Technology&amp;quot; for 2019).&#xA;Thus, this isn’t strictly an apples-to-apples comparison.&#xA;For example, it’s possible that one effect of simplifying the category list&#xA;was to reduce the use of the &amp;quot;Software&amp;quot; category as a catch-all for respondents&#xA;writing Go software for an industry that wasn’t explicitly listed.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig6.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;Go is a successful open-source project, but that doesn’t mean the developers&#xA;working with it are also writing free or open-source software.&#xA;As in prior years, we found that most respondents are not frequent contributors&#xA;to Go open-source projects,&#xA;with 75% saying they do so &amp;quot;infrequently&amp;quot; or &amp;quot;never&amp;quot;.&#xA;As the Go community expands, we see the proportion of respondents who’ve&#xA;never contributed to Go open-source projects slowly trending up.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig7.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_5.&#34;&gt;Developer tools&lt;/h4&gt;&#xA;  &lt;p&gt;As in prior years, the vast majority of survey respondents reported working&#xA;with Go on Linux and macOS systems.&#xA;This is one area of strong divergence between our respondents and StackOverflow’s 2019 results:&#xA;in our survey, only 20% of respondents use Windows as a primary development platform,&#xA;while for StackOverflow it was 45% of respondents.&#xA;Linux is used by 66% and macOS by 53%—both much higher than the StackOverflow audience,&#xA;which reported 25% and 30%, respectively.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig8.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig9.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;The trend in editor consolidation has continued this year.&#xA;GoLand saw the sharpest increase in use this year,&#xA;rising from 24% → 34%.&#xA;VS Code’s growth slowed, but it remains the most popular editor among respondents at 41%.&#xA;Combined, these two editors are now preferred by 3 out of 4 respondents.&lt;/p&gt;&#xA;&lt;p&gt;Every other editor saw a small decrease. This doesn’t mean those editors&#xA;aren’t being used at all,&#xA;but they’re not what respondents say they &lt;em&gt;prefer&lt;/em&gt; to use for writing Go code.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig10.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;This year we added a question about internal Go documentation tooling,&#xA;such as &lt;a href=&#34;https://github.com/golang/gddo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gddo&lt;/a&gt;.&#xA;A small minority of respondents (6%) reported that their organization runs&#xA;its own Go documentation server,&#xA;though this proportion nearly doubles (to 11%) when we look at respondents&#xA;at large organizations (those with at least 5,000 employees).&#xA;A follow-up asked of respondents who said their organization had stopped&#xA;running its own documentation server suggests that the top reason to retire&#xA;their server was a combination of low perceived benefits (23%) versus the&#xA;amount of effort required to initially set it up and maintain it (38%).&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig11.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_6.&#34;&gt;Sentiments towards Go&lt;/h4&gt;&#xA;  &lt;p&gt;Large majorities of respondents agreed that Go is working well for their&#xA;teams (86%) and that they’d prefer to use it for their next project (89%).&#xA;We also found that over half of respondents (59%) believe Go is critical&#xA;to the success of their companies.&#xA;All of these metrics have remained stable since 2016.&lt;/p&gt;&#xA;&lt;p&gt;Normalizing the results changed most of these numbers for prior years.&#xA;For example, the percentage of respondents who agreed with the statement&#xA;&amp;quot;Go is working well for my team&amp;quot; was previously in the 50’s and 60’s because&#xA;of participant drop-off;&#xA;when we remove participants who never saw the question,&#xA;we see it’s been fairly stable since 2016.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig12.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;Looking at sentiments toward problem solving in the Go ecosystem,&#xA;we see similar results.&#xA;Large percentages of respondents agreed with each statement (82%–88%),&#xA;and these rates have been largely stable over the past four years.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig13.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;This year we took a more nuanced look at satisfaction across industries&#xA;to establish a baseline.&#xA;Overall, respondents were positive about using Go at work,&#xA;regardless of industry sector.&#xA;We do see small variations in dissatisfaction in a few areas,&#xA;most notably manufacturing, which we plan to investigate with follow-up research.&#xA;Similarly, we asked about satisfaction with—and the importance of—various&#xA;aspects of Go development.&#xA;Pairing these measures together highlighted three topics of particular focus:&#xA;debugging (including debugging concurrency),&#xA;using modules, and using cloud services.&#xA;Each of these topics was rated &amp;quot;very&amp;quot; or &amp;quot;critically&amp;quot; important by a majority&#xA;of respondents but had significantly lower satisfaction scores compared to other topics.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig14.svg&#34; width=&#34;800&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig15.svg&#34; width=&#34;750&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;Turning to sentiments toward the Go community,&#xA;we see some differences from prior years.&#xA;First, there is a dip in the percentage of respondents who agreed with the&#xA;statement &amp;quot;I feel welcome in the Go community&amp;quot;, from 82% to 75%.&#xA;Digging deeper revealed that the proportion of respondents who &amp;quot;slightly&amp;quot;&#xA;or &amp;quot;moderately agreed&amp;quot; decreased,&#xA;while the proportions who &amp;quot;neither agree nor disagree&amp;quot; and &amp;quot;strongly agree&amp;quot;&#xA;both increased (up 5 and 7 points, respectively).&#xA;This polarizing split suggests two or more groups whose experiences in the&#xA;Go community are diverging,&#xA;and is thus another area we plan to further investigate.&lt;/p&gt;&#xA;&lt;p&gt;The other big differences are a clear upward trend in responses to the statement&#xA;&amp;quot;I feel welcome to contribute to the Go project&amp;quot; and a large year-over-year&#xA;increase in the proportion of respondents who feel Go’s project leadership&#xA;understands their needs.&lt;/p&gt;&#xA;&lt;p&gt;All of these results show a pattern of higher agreement correlated with&#xA;increased Go experience,&#xA;beginning at about two years.&#xA;In other words, the longer a respondent has been using Go,&#xA;the more likely they were to agree with each of these statements.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig16.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;This likely comes as no surprise, but people who responded to the Go Developer&#xA;Survey tended to like Go.&#xA;However, we also wanted to understand which &lt;em&gt;other&lt;/em&gt; languages respondents enjoy working with.&#xA;Most of these numbers have not significantly changed from prior years,&#xA;with two exceptions:&#xA;TypeScript (which has increased 10 points),&#xA;and Rust (up 7 points).&#xA;When we break these results down by duration of Go experience,&#xA;we see the same pattern as we found for language expertise.&#xA;In particular, Python is the language and ecosystem that Go developers are&#xA;most likely to also enjoy building with.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig17.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;In 2018 we first asked the &amp;quot;Would you recommend…&amp;quot; &lt;a href=&#34;https://en.wikipedia.org/wiki/Net_Promoter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Net Promoter Score&lt;/a&gt; (NPS) question,&#xA;yielding a score of 61.&#xA;This year our NPS result is a statistically unchanged 60 (67% &amp;quot;promoters&amp;quot;&#xA;minus 7% &amp;quot;detractors&amp;quot;).&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig18.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_7.&#34;&gt;Working with Go&lt;/h4&gt;&#xA;  &lt;p&gt;Building API/RPC services (71%) and CLIs (62%) remain the most common uses of Go.&#xA;The chart below appears to show major changes from 2018,&#xA;but these are most likely the result of randomizing the order of choices,&#xA;which used to be listed alphabetically:&#xA;3 of the 4 choices beginning with ’A’ decreased,&#xA;while everything else remained stable or increased.&#xA;Thus, this chart is best interpreted as a more accurate baseline for 2019&#xA;with trends from 2016–2018.&#xA;For example, we believe that the proportion of respondents building web&#xA;services which return HTML has been decreasing since 2016 but were likely&#xA;undercounted because this response was always at the bottom of a long list of choices.&#xA;We also broke this out by organization size and industry but found no significant differences:&#xA;it appears respondents use Go in roughly similar ways whether they work&#xA;at a small tech start-up or a large retail enterprise.&lt;/p&gt;&#xA;&lt;p&gt;A related question asked about the larger areas in which respondents work with Go.&#xA;The most common area by far was web development (66%),&#xA;but other common areas included databases (45%),&#xA;network programming (42%), systems programming (38%),&#xA;and DevOps tasks (37%).&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig19.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig20.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;In addition to what respondents are building,&#xA;we also asked about some of the development techniques they use.&#xA;A large majority of respondents said they depend upon text logs for debugging (88%),&#xA;and their free-text responses suggest this is because alternative tooling&#xA;is challenging to use effectively.&#xA;However, local stepwise debugging (e.g., with Delve),&#xA;profiling, and testing with the race detector were not uncommon,&#xA;with ~50% of respondents depending upon at least one of these techniques.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig21.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;Regarding package management, we found that the vast majority of respondents&#xA;have adopted modules for Go (89%).&#xA;This has been a big shift for developers,&#xA;and nearly the entire community appears to be going through it simultaneously.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig22.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;We also found that 75% of respondents evaluate the current Go release for production use,&#xA;with an additional 12% waiting one release cycle.&#xA;This suggests a large majority of Go developers are using (or at the least,&#xA;trying to use) the current or previous stable release,&#xA;highlighting the importance for platform-as-a-service providers to quickly&#xA;support new stable releases of Go.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig23.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_8.&#34;&gt;Go in the clouds&lt;/h4&gt;&#xA;  &lt;p&gt;Go was designed with modern distributed computing in mind,&#xA;and we want to continue to improve the developer experience of building&#xA;cloud services with Go.&#xA;This year we expanded the questions we asked about cloud development to&#xA;better understand how respondents are working with cloud providers,&#xA;what they like about the current developer experience,&#xA;and what can be improved.&#xA;As mentioned earlier, some of the 2018 results appear to be outliers,&#xA;such as an unexpectedly low result for self-owned servers,&#xA;and an unexpectedly high result for GCP deployments.&lt;/p&gt;&#xA;&lt;p&gt;We see two clear trends:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;The three largest global cloud providers (Amazon Web Services,&#xA;Google Cloud Platform, and Microsoft Azure) all appear to be trending up&#xA;in usage among survey respondents,&#xA;while most other providers are used by a smaller proportion of respondents each year.&lt;/li&gt;&#xA;&lt;li&gt;On-prem deployments to self-owned or company-owned servers continue to&#xA;decrease and are now statistically tied with AWS (44% vs.&#xA;42%) as the most common deployment targets.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Looking at which types of cloud platforms respondents are using,&#xA;we see differences between the major providers.&#xA;Respondents deploying to AWS and Azure were most likely to be using VMs&#xA;directly (65% and 51%,&#xA;respectively), while those deploying to GCP were almost twice as likely&#xA;to be using the managed Kubernetes platform (GKE,&#xA;64%) than VMs (35%).&#xA;We also found that respondents deploying to AWS were equally likely to be&#xA;using a managed Kubernetes platform (32%) as they were to be using a managed&#xA;serverless platform (AWS Lambda, 33%).&#xA;Both GCP (17%) and Azure (7%) had lower proportions of respondents using&#xA;serverless platforms,&#xA;and free-text responses suggest a primary reason was delayed support for&#xA;the latest Go runtime on these platforms.&lt;/p&gt;&#xA;&lt;p&gt;Overall, a majority of respondents were satisfied with using Go on all three&#xA;major cloud providers.&#xA;Respondents reported similar satisfaction levels with Go development for&#xA;AWS (80% satisfied) and GCP (78%).&#xA;Azure received a lower satisfaction score (57% satisfied),&#xA;and free-text responses suggest that the main driver was a perception that&#xA;Go lacks first-class support on this platform (25% of free-text responses).&#xA;Here, &amp;quot;first-class support&amp;quot; refers to always staying up-to-date with the latest Go release,&#xA;and ensuring new features are available to Go developers at time of launch.&#xA;This was the same top pain-point reported by respondents using GCP (14%),&#xA;and particularly focused on support for the latest Go runtime in serverless deployments.&#xA;Respondents deploying to AWS, in contrast,&#xA;were most likely to say the SDK could use improvements,&#xA;such as being more idiomatic (21%).&#xA;SDK improvements were also the second most common request for both GCP (9%)&#xA;and Azure (18%) developers.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig24.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig25.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig26.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_9.&#34;&gt;Pain points&lt;/h4&gt;&#xA;  &lt;p&gt;The top reasons respondents say they are unable to use Go more remain working&#xA;on a project in another language (56%),&#xA;working on a team that prefers to use another language (37%),&#xA;and the lack of a critical feature in Go itself (25%).&lt;/p&gt;&#xA;&lt;p&gt;This was one of the questions where we randomized the choice list,&#xA;so year-over-year comparisons aren’t valid,&#xA;though 2016–2018 trends are.&#xA;For example, we are confident that the number of developers unable to use&#xA;Go more frequently because their team prefers a different language is decreasing each year,&#xA;but we don’t know whether that decrease dramatically accelerated this year,&#xA;or was always a bit lower than our 2016–2018 numbers estimated.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig27.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;The top two adoption blockers (working on an existing non-Go project and&#xA;working on a team that prefers a different language) don’t have direct technical solutions,&#xA;but the remaining blockers might.&#xA;Thus, this year we asked for more details,&#xA;to better understand how we might help developers increase their use of Go.&#xA;The charts in the remainder of this section are based on free-text responses&#xA;which were manually categorized,&#xA;so they have &lt;em&gt;very&lt;/em&gt; long tails;&#xA;categories totalling less than 3% of the total responses have been grouped&#xA;into the &amp;quot;Other&amp;quot; category for each chart.&#xA;A single response may mention multiple topics,&#xA;thus charts do not not sum to 100%.&lt;/p&gt;&#xA;&lt;p&gt;Among the 25% of respondents who said Go lacks language features they need,&#xA;79% pointed to generics as a critical missing feature.&#xA;Continued improvements to error handling (in addition to the Go 1.13 changes) was cited by 22%,&#xA;while 13% requested more functional programming features,&#xA;particularly built-in map/filter/reduce functionality.&#xA;To be clear, these numbers are from the subset of respondents who said they&#xA;would be able to use Go more were it not missing one or more critical features they need,&#xA;not the entire population of survey respondents.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig28.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;Respondents who said Go &amp;quot;isn’t an appropriate language&amp;quot; for what they work&#xA;on had a wide variety of reasons and use-cases.&#xA;The most common was that they work on some form of front-end development (22%),&#xA;such as GUIs for web, desktop, or mobile.&#xA;Another common response was that the respondent said they worked in a domain&#xA;with an already-dominant language (9%),&#xA;making it a challenge to use something different.&#xA;Some respondents also told us which domain they were referring to (or simply&#xA;mentioned a domain without mentioning another language being more common),&#xA;which we show via the &amp;quot;I work on [domain]&amp;quot; rows below.&#xA;An additional top reason cited by respondents was a need for better performance (9%),&#xA;particularly for real-time computing.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig29.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;The biggest challenges respondents reported remain largely consistent with last year.&#xA;Go’s lack of generics and modules/package management still top the list&#xA;(15% and 12% of responses,&#xA;respectively), and the proportion of respondents highlighting tooling problems increased.&#xA;These numbers are different from the above charts because this question&#xA;was asked of &lt;em&gt;all&lt;/em&gt; respondents,&#xA;regardless of what they said their biggest Go adoption blockers were.&#xA;All three of these are areas of focus for the Go team this year,&#xA;and we hope to greatly improve the developer experience,&#xA;particularly around modules, tooling, and the getting started experience,&#xA;in the coming months.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig30.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;Diagnosing faults and performance issues can be challenging in any language.&#xA;Respondents told us their top challenge for both of these was not something&#xA;specific to Go’s implementation or tooling,&#xA;but a more fundamental issue:&#xA;a self-reported lack of knowledge, experience, or best practices.&#xA;We hope to help address these knowledge gaps via documentation and other&#xA;educational materials later this year.&#xA;The other major problems do involve tooling,&#xA;specifically a perceived unfavorable cost/benefit trade-off to learning/using&#xA;Go’s debugging and profiling tooling,&#xA;and challenges making the tooling work in various environments (e.g.,&#xA;debugging in containers, or getting performance profiles from production systems).&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig31.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig32.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;Finally, when we asked what would most improve Go support in respondents’&#xA;editing environment,&#xA;the most common response was for general improvements or better support&#xA;for the language server (gopls, 19%).&#xA;This was expected, as gopls replaces about 80 extant tools and is still in beta.&#xA;When respondents were more specific about what they’d like to see improved,&#xA;they were most likely to report the debugging experience (14%) and faster&#xA;or more reliable code completion (13%).&#xA;A number of participants also explicitly referenced the need to frequently&#xA;restart VS Code when using gopls (8%);&#xA;in the time since this survey was in the field (late November – early December 2019),&#xA;many of these gopls improvements have already landed,&#xA;and this continues to be a high-priority area for the team.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig33.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_10.&#34;&gt;The Go community&lt;/h4&gt;&#xA;  &lt;p&gt;Roughly two thirds of respondents used Stack Overflow to answer their Go-related questions (64%).&#xA;The other top sources of answers were godoc.org (47%),&#xA;directly reading source code (42%), and golang.org (33%).&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig34.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;The long tail on the previous chart highlights the large variety of different&#xA;sources (nearly all of them community-driven) and modalities that respondents&#xA;rely on to overcome challenges while developing with Go.&#xA;Indeed, for many Gophers, this may be one of their main points of interaction&#xA;with the larger community:&#xA;as our community expands, we’ve seen higher and higher proportions of respondents&#xA;who do not attend any Go-related events.&#xA;For 2019, that proportion nearly reached two thirds of respondents (62%).&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig35.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;Due to updated Google-wide privacy guidelines,&#xA;we can no longer ask about which countries respondents live in.&#xA;Instead we asked about preferred spoken/written language as a very rough&#xA;proxy for Go’s worldwide usage,&#xA;with the benefit of providing data for potential localization efforts.&lt;/p&gt;&#xA;&lt;p&gt;Because this survey is in English, there is likely a strong bias toward&#xA;English speakers and people from areas where English is a common second or third language.&#xA;Thus, the non-English numbers should be interpreted as likely minimums rather&#xA;than an approximation of Go’s global audience.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig36.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;We found 12% of respondents identify with a traditionally underrepresented group (e.g.,&#xA;ethnicity, gender identity, et al.) and 3% identify as female.&#xA;(This question should have said &amp;quot;woman&amp;quot; instead of &amp;quot;female&amp;quot;.&#xA;The mistake has been corrected in our draft survey for 2020,&#xA;and we apologize for it.)&#xA;We strongly suspect this 3% is undercounting women in the Go community.&#xA;For example, we know women software developers in the US respond to the&#xA;StackOverflow Developer Survey at &lt;a href=&#34;https://insights.stackoverflow.com/survey/2019#developer-profile-_-developer-type&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;about half the rate we’d expect based on US employment figures&lt;/a&gt; (11% vs 20%).&#xA;Since we don’t know the proportion of responses in the US,&#xA;we can’t safely extrapolate from these numbers beyond saying the actual&#xA;proportion is likely higher than 3%.&#xA;Furthermore, GDPR required us to change how we ask about sensitive information,&#xA;which includes gender and traditionally underrepresented groups.&#xA;Unfortunately these changes prevent us from being able to make valid comparisons&#xA;of these numbers with prior years.&lt;/p&gt;&#xA;&lt;p&gt;Respondents who identified with underrepresented groups or preferred not&#xA;to answer this question showed higher rates of disagreement with the statement&#xA;&amp;quot;I feel welcome in the Go community&amp;quot; (8% vs.&#xA;4%) than those who do not identify with an underrepresented group,&#xA;highlighting the importance of our continued outreach efforts.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig37.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig38.svg&#34; width=&#34;700&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;div class=&#34;image&#34;&gt;&#xA;  &lt;img src=&#34;survey2019/fig39.svg&#34; width=&#34;800&#34; alt=&#34;&#34;&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_11.&#34;&gt;Conclusion&lt;/h4&gt;&#xA;  &lt;p&gt;We hope you’ve enjoyed seeing the results of our 2019 developer survey.&#xA;Understanding developers’ experiences and challenges helps us plan and prioritize work for 2020.&#xA;Once again, an enormous thank you to everyone who contributed to this survey—your&#xA;feedback is helping to steer Go’s direction in the coming year and beyond.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;  &#xA;</content></entry><entry><title>Go, the Go Community, and the Pandemic</title><id>tag:blog.golang.org,2013:blog.golang.org/pandemic</id><link rel="alternate" href="https://blog.golang.org/pandemic"></link><published>2020-03-25T11:00:00+00:00</published><updated>2020-03-25T11:00:00+00:00</updated><author><name>Carmen Andoh, Russ Cox, and Steve Francia</name></author><summary type="html"></summary><content type="html">&#xA;  &#xA;  &#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_1.&#34;&gt;&lt;/h4&gt;&#xA;  &lt;p&gt;Go always comes second to more&#xA;basic concerns like personal and family health and safety.&#xA;Around the world, the past couple months have been terrible,&#xA;and we are still at the start of this awful pandemic.&#xA;There are days when it seems like working on&#xA;anything related to Go should be considered a serious priority inversion.&lt;/p&gt;&#xA;&lt;p&gt;But after we’ve done all we can&#xA;to prepare ourselves and our families for whatever is coming,&#xA;getting back to some approximation of a familiar routine&#xA;and normal work is a helpful coping mechanism.&#xA;In that spirit, we intend to keep working on Go&#xA;and trying to help the Go community as much as we can.&lt;/p&gt;&#xA;&lt;p&gt;In this post we want to share a few important notes about&#xA;how the pandemic is affecting the Go community,&#xA;a few things we’re doing to help, what you can do to help,&#xA;and our plans for Go itself.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_2.&#34;&gt;Conferences and Meetups&lt;/h4&gt;&#xA;  &lt;p&gt;The Go community thrives on in-person conferences and meetups.&#xA;We had anticipated 35 conferences this year&#xA;and thousands of meetups, nearly all of which have&#xA;now changed, been postponed, or been cancelled.&#xA;We’ll keep the&#xA;&lt;a href=&#34;https://github.com/golang/go/wiki/Conferences&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;conferences wiki page&lt;/a&gt;&#xA;updated as plans change.&lt;/p&gt;&#xA;&lt;p&gt;We want to do everything we can to help support impacted Go conferences.&#xA;We also want to support efforts to explore&#xA;new ways for gophers to connect in the time of social distancing.&#xA;In addition to honoring Google’s existing sponsorships,&#xA;we are interested to offer support to people planning&#xA;virtual conference alternatives through the rest of the year.&#xA;If you are organizing a Go conference and have been impacted,&#xA;or if you are considering holding a virtual alternative,&#xA;please reach out to Carmen Andoh at &lt;em&gt;candoh@google.com&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;For conference organizers,&#xA;the &lt;a href=&#34;https://gophers.slack.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gophers slack&lt;/a&gt;&#xA;&lt;a href=&#34;https://app.slack.com/client/T029RQSE6/C97B0NCVD&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;#conf-organizers&lt;/a&gt; channel&#xA;is a place to discuss contingency plans,&#xA;best practices, cancellation, and postponement support.&#xA;It’s also a place to share idea for virtual events,&#xA;to continue to connect and support the Go community.&lt;/p&gt;&#xA;&lt;p&gt;For meetup organizers,&#xA;the &lt;a href=&#34;https://www.meetup.com/pro/go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go Developer Network&lt;/a&gt;&#xA;can provide Zoom for Education licensing to meetups&#xA;that want to start holding virtual meetings.&#xA;If you host a meetup, or you’d like to, we encourage you&#xA;to use this opportunity to get speakers from outside your&#xA;region to present to your group.&#xA;For more information, and to get involved,&#xA;please join&#xA;the &lt;a href=&#34;https://gophers.slack.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gophers slack&lt;/a&gt;&#xA;&lt;a href=&#34;https://app.slack.com/client/T029RQSE6/C152YB9UZ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;#remotemeetup&lt;/a&gt; channel.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_3.&#34;&gt;Online Training&lt;/h4&gt;&#xA;  &lt;p&gt;The Go trainers you meet at conferences also travel the globe doing&#xA;&lt;a href=&#34;https://learn.go.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;in-person training&lt;/a&gt;&#xA;for companies that want help adopting Go.&#xA;That in-person teaching is crucial to bringing&#xA;new gophers into the community;&#xA;we’re incredibly grateful to the trainers for the work they do.&#xA;Unfortunately, on-site training contracts have all been cancelled&#xA;for the next few months, and the trainers in our community&#xA;have lost their primary (or sole) source of income.&#xA;We encourage companies to consider virtual training&#xA;and workshops during this difficult time.&#xA;Most trainers are being flexible with pricing,&#xA;scheduling, and class structure.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_4.&#34;&gt;Job Postings&lt;/h4&gt;&#xA;  &lt;p&gt;We know that the current downturn means that some&#xA;gophers are looking for new jobs.&#xA;The Go community has built a number of Go-specific job-posting sites, including&#xA;&lt;a href=&#34;https://golang.cafe/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Golang Cafe&lt;/a&gt;,&#xA;&lt;a href=&#34;https://www.golangprojects.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Golang Projects&lt;/a&gt;,&#xA;and&#xA;&lt;a href=&#34;https://www.welovegolang.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;We Love Go&lt;/a&gt;.&#xA;The &lt;a href=&#34;https://gophers.slack.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gophers slack&lt;/a&gt;&#xA;also has many job-hunting channels: search for “job” in the channel list.&#xA;We encourage employers with any new openings to post in as&#xA;many appropriate places as possible.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_5.&#34;&gt;FOSS Responders&lt;/h4&gt;&#xA;  &lt;p&gt;We are proud that Go is part of the broader open-source ecosystem.&#xA;&lt;a href=&#34;https://fossresponders.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FOSS Responders&lt;/a&gt;&#xA;is one effort to help the open-source ecosystem&#xA;deal with the impacts of the pandemic.&#xA;If you want to do something to help affected open-source communities,&#xA;they are coordinating efforts and also have links to other efforts.&#xA;And if you know of other open-source communities that need help,&#xA;let them know about FOSS Responders.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_6.&#34;&gt;COVID-19 Open-Source Help Desk&lt;/h4&gt;&#xA;  &lt;p&gt;The &lt;a href=&#34;https://covid-oss-help.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;COVID-19 Open-Source Help Desk&lt;/a&gt;&#xA;aims to help virologists, epidemiologists, and other domain experts&#xA;find quick answers to any problems they are having with&#xA;open-source scientific computing software,&#xA;from experts in that software,&#xA;so they can focus their time on what they know best.&#xA;If you are a developer or a scientific computing expert&#xA;willing to help by answering the posts of the domain experts,&#xA;visit the site to learn how to help.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_7.&#34;&gt;U.S. Digital Response&lt;/h4&gt;&#xA;  &lt;p&gt;For our gophers in the United States,&#xA;the &lt;a href=&#34;https://www.usdigitalresponse.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;U.S. Digital Response&lt;/a&gt;&#xA;is working to connect qualified volunteers to&#xA;state and local governments that need digital help&#xA;during this crisis.&#xA;Quoting the web page,&#xA;“If you have relevant experience&#xA;(healthcare, data, engineering &amp;amp; product development,&#xA;general management, operations, supply chain/procurement and more),&#xA;can work autonomously through ambiguity,&#xA;and are ready to jump into a high-intensity environment,”&#xA;see the site for how to volunteer.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_8.&#34;&gt;Plans for Go&lt;/h4&gt;&#xA;  &lt;p&gt;Here on the Go team at Google, we recognize that the&#xA;world around us is changing rapidly&#xA;and that plans beyond the next couple weeks&#xA;are not much more than hopeful guesses.&#xA;That said, right now we are working&#xA;on what we think are the most important projects for 2020.&#xA;Like all of you, we’re at reduced capacity, so the work&#xA;continues slower than planned.&lt;/p&gt;&#xA;&lt;p&gt;Our analysis of the Go 2019 user survey is almost complete,&#xA;and we hope to post it soon.&lt;/p&gt;&#xA;&lt;p&gt;At least for now, we intend to keep to our timeline for Go 1.15,&#xA;with the understanding that it will probably have fewer new features&#xA;and improvements than we originally planned.&#xA;We continue to do code reviews, issue triage,&#xA;and &lt;a href=&#34;https://golang.org/s/proposal-minutes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;proposal review&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://go.googlesource.com/tools/+/refs/heads/master/gopls/README.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gopls&lt;/a&gt;&#xA;is the language-aware backend supporting most Go editors today,&#xA;and we continue to work toward its 1.0 release.&lt;/p&gt;&#xA;&lt;p&gt;The new Go package and module site &lt;a href=&#34;https://pkg.go.dev&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pkg.go.dev&lt;/a&gt;&#xA;keeps getting better.&#xA;We’ve been working on usability improvements&#xA;and new features to better help users find and evaluate Go packages.&#xA;We’ve also expanded the set of recognized licenses and improved the&#xA;license detector, with more improvements to come.&lt;/p&gt;&#xA;&lt;p&gt;Our &lt;a href=&#34;https://golang.org/conduct#values&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gopher values&lt;/a&gt;&#xA;are what ground us, now more than ever.&#xA;We are working extra hard to be friendly, welcoming,&#xA;patient, thoughtful, respectful, and charitable.&#xA;We hope everyone in the Go community will try to do the same.&lt;/p&gt;&#xA;&lt;p&gt;We’ll continue to use this blog to let you know about&#xA;important news for the Go ecosystem.&#xA;In those moments when you’ve taken care of the much more&#xA;important things going on in your life,&#xA;we hope you’ll check in and see what we’ve been up to.&lt;/p&gt;&#xA;&lt;p&gt;Thank you, as always, for using Go and being part of the Go community.&#xA;We wish you all the best in these difficult times.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;  &#xA;</content></entry><entry><title>A new Go API for Protocol Buffers</title><id>tag:blog.golang.org,2013:blog.golang.org/a-new-go-api-for-protocol-buffers</id><link rel="alternate" href="https://blog.golang.org/protobuf-apiv2"></link><published>2020-03-02T11:00:00+00:00</published><updated>2020-03-02T11:00:00+00:00</updated><author><name>Joe Tsai, Damien Neil, and Herbie Ong</name></author><summary type="html"></summary><content type="html">&#xA;  &#xA;  &#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_1.&#34;&gt;Introduction&lt;/h4&gt;&#xA;  &lt;p&gt;We are pleased to announce the release of a major revision of the Go API for&#xA;&lt;a href=&#34;https://developers.google.com/protocol-buffers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;protocol buffers&lt;/a&gt;,&#xA;Google&#39;s language-neutral data interchange format.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_2.&#34;&gt;Motivations for a new API&lt;/h4&gt;&#xA;  &lt;p&gt;The first protocol buffer bindings for Go were&#xA;&lt;a href=&#34;https://blog.golang.org/third-party-libraries-goprotobuf-and&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;announced by Rob Pike&lt;/a&gt;&#xA;in March of 2010. Go 1 would not be released for another two years.&lt;/p&gt;&#xA;&lt;p&gt;In the decade since that first release, the package has grown and&#xA;developed along with Go. Its users&#39; requirements have grown too.&lt;/p&gt;&#xA;&lt;p&gt;Many people want to write programs that use reflection to examine protocol&#xA;buffer messages. The&#xA;&lt;a href=&#34;https://pkg.go.dev/reflect&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;reflect&lt;/code&gt;&lt;/a&gt;&#xA;package provides a view of Go types and&#xA;values, but omits information from the protocol buffer type system. For&#xA;example, we might want to write a function that traverses a log entry and&#xA;clears any field annotated as containing sensitive data. The annotations&#xA;are not part of the Go type system.&lt;/p&gt;&#xA;&lt;p&gt;Another common desire is to use data structures other than the ones&#xA;generated by the protocol buffer compiler, such as a dynamic message type&#xA;capable of representing messages whose type is not known at compile time.&lt;/p&gt;&#xA;&lt;p&gt;We also observed that a frequent source of problems was that the&#xA;&lt;a href=&#34;https://pkg.go.dev/github.com/golang/protobuf/proto?tab=doc#Message&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;proto.Message&lt;/code&gt;&lt;/a&gt;&#xA;interface, which identifies values of generated message types, does very&#xA;little to describe the behavior of those types. When users create types&#xA;that implement that interface (often inadvertently by embedding a message&#xA;in another struct) and pass values of those types to functions expecting&#xA;a generated message value, programs crash or behave unpredictably.&lt;/p&gt;&#xA;&lt;p&gt;All three of these problems have a common cause, and a common solution:&#xA;The &lt;code&gt;Message&lt;/code&gt; interface should fully specify the behavior of a message,&#xA;and functions operating on &lt;code&gt;Message&lt;/code&gt; values should freely accept any&#xA;type that correctly implements the interface.&lt;/p&gt;&#xA;&lt;p&gt;Since it is not possible to change the existing definition of the&#xA;&lt;code&gt;Message&lt;/code&gt; type while keeping the package API compatible, we decided that&#xA;it was time to begin work on a new, incompatible major version of the&#xA;protobuf module.&lt;/p&gt;&#xA;&lt;p&gt;Today, we&#39;re pleased to release that new module. We hope you like it.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_3.&#34;&gt;Reflection&lt;/h4&gt;&#xA;  &lt;p&gt;Reflection is the flagship feature of the new implementation. Similar&#xA;to how the &lt;code&gt;reflect&lt;/code&gt; package provides a view of Go types and values, the&#xA;&lt;a href=&#34;https://pkg.go.dev/google.golang.org/protobuf/reflect/protoreflect?tab=doc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;google.golang.org/protobuf/reflect/protoreflect&lt;/code&gt;&lt;/a&gt;&#xA;package provides a view of values according to the protocol buffer&#xA;type system.&lt;/p&gt;&#xA;&lt;p&gt;A complete description of the &lt;code&gt;protoreflect&lt;/code&gt; package would run too long&#xA;for this post, but let&#39;s look at how we might write the log-scrubbing&#xA;function we mentioned previously.&lt;/p&gt;&#xA;&lt;p&gt;First, we&#39;ll write a &lt;code&gt;.proto&lt;/code&gt; file defining an extension of the&#xA;&lt;a href=&#34;https://github.com/protocolbuffers/protobuf/blob/b96241b1b716781f5bc4dc25e1ebb0003dfaba6a/src/google/protobuf/descriptor.proto#L509&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;google.protobuf.FieldOptions&lt;/code&gt;&lt;/a&gt;&#xA;type so we can annotate fields as containing&#xA;sensitive information or not.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;syntax = &amp;quot;proto3&amp;quot;;&#xA;import &amp;quot;google/protobuf/descriptor.proto&amp;quot;;&#xA;package golang.example.policy;&#xA;extend google.protobuf.FieldOptions {&#xA;    bool non_sensitive = 50000;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;We can use this option to mark certain fields as non-sensitive.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;message MyMessage {&#xA;    string public_name = 1 [(golang.example.policy.non_sensitive) = true];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Next, we will write a Go function which accepts an arbitrary message&#xA;value and removes all the sensitive fields.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// Redact clears every sensitive field in pb.&#xA;func Redact(pb proto.Message) {&#xA;   // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This function accepts a&#xA;&lt;a href=&#34;https://pkg.go.dev/google.golang.org/protobuf/proto?tab=doc#Message&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;proto.Message&lt;/code&gt;&lt;/a&gt;,&#xA;an interface type implemented by all generated message types. This type&#xA;is an alias for one defined in the &lt;code&gt;protoreflect&lt;/code&gt; package:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;type ProtoMessage interface{&#xA;    ProtoReflect() Message&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;To avoid filling up the namespace of generated&#xA;messages, the interface contains only a single method returning a&#xA;&lt;a href=&#34;https://pkg.go.dev/google.golang.org/protobuf/reflect/protoreflect?tab=doc#Message&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;protoreflect.Message&lt;/code&gt;&lt;/a&gt;,&#xA;which provides access to the message contents.&lt;/p&gt;&#xA;&lt;p&gt;(Why an alias? Because &lt;code&gt;protoreflect.Message&lt;/code&gt; has a corresponding&#xA;method returning the original &lt;code&gt;proto.Message&lt;/code&gt;, and we need to avoid an&#xA;import cycle between the two packages.)&lt;/p&gt;&#xA;&lt;p&gt;The&#xA;&lt;a href=&#34;https://pkg.go.dev/google.golang.org/protobuf/reflect/protoreflect?tab=doc#Message.Range&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;protoreflect.Message.Range&lt;/code&gt;&lt;/a&gt;&#xA;method calls a function for every populated field in a message.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;m := pb.ProtoReflect()&#xA;m.Range(func(fd protoreflect.FieldDescriptor, v protoreflect.Value) bool {&#xA;    // ...&#xA;    return true&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The range function is called with a&#xA;&lt;a href=&#34;https://pkg.go.dev/google.golang.org/protobuf/reflect/protoreflect?tab=doc#FieldDescriptor&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;protoreflect.FieldDescriptor&lt;/code&gt;&lt;/a&gt;&#xA;describing the protocol buffer type of the field, and a&#xA;&lt;a href=&#34;https://pkg.go.dev/google.golang.org/protobuf/reflect/protoreflect?tab=doc#Value&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;protoreflect.Value&lt;/code&gt;&lt;/a&gt;&#xA;containing the field value.&lt;/p&gt;&#xA;&lt;p&gt;The&#xA;&lt;a href=&#34;https://pkg.go.dev/google.golang.org/protobuf/reflect/protoreflect?tab=doc#Descriptor.Options&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;protoreflect.FieldDescriptor.Options&lt;/code&gt;&lt;/a&gt;&#xA;method returns the field options as a &lt;code&gt;google.protobuf.FieldOptions&lt;/code&gt;&#xA;message.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;opts := fd.Options().(*descriptorpb.FieldOptions)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;(Why the type assertion? Since the generated &lt;code&gt;descriptorpb&lt;/code&gt; package&#xA;depends on &lt;code&gt;protoreflect&lt;/code&gt;, the &lt;code&gt;protoreflect&lt;/code&gt; package can&#39;t return the&#xA;concrete options type without causing an import cycle.)&lt;/p&gt;&#xA;&lt;p&gt;We can then check the options to see the value of our extension boolean:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;if proto.GetExtension(opts, policypb.E_NonSensitive).(bool) {&#xA;    return true // don&#39;t redact non-sensitive fields&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Note that we are looking at the field &lt;em&gt;descriptor&lt;/em&gt; here, not the field&#xA;&lt;em&gt;value&lt;/em&gt;. The information we&#39;re interested in lies in the protocol&#xA;buffer type system, not the Go one.&lt;/p&gt;&#xA;&lt;p&gt;This is also an example of an area where we&#xA;have simplified the &lt;code&gt;proto&lt;/code&gt; package API. The original&#xA;&lt;a href=&#34;https://pkg.go.dev/github.com/golang/protobuf/proto?tab=doc#GetExtension&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;proto.GetExtension&lt;/code&gt;&lt;/a&gt;&#xA;returned both a value and an error. The new&#xA;&lt;a href=&#34;https://pkg.go.dev/google.golang.org/protobuf/proto?tab=doc#GetExtension&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;proto.GetExtension&lt;/code&gt;&lt;/a&gt;&#xA;returns just a value, returning the default value for the field if it is&#xA;not present. Extension decoding errors are reported at &lt;code&gt;Unmarshal&lt;/code&gt; time.&lt;/p&gt;&#xA;&lt;p&gt;Once we have identified a field that needs redaction, clearing it is simple:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;m.Clear(fd)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Putting all the above together, our complete redaction function is:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// Redact clears every sensitive field in pb.&#xA;func Redact(pb proto.Message) {&#xA;    m := pb.ProtoReflect()&#xA;    m.Range(func(fd protoreflect.FieldDescriptor, v protoreflect.Value) bool {&#xA;        opts := fd.Options().(*descriptorpb.FieldOptions)&#xA;        if proto.GetExtension(opts, policypb.E_NonSensitive).(bool) {&#xA;            return true&#xA;        }&#xA;        m.Clear(fd)&#xA;        return true&#xA;    })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;A more complete implementation might recursively descend into&#xA;message-valued fields. We hope that this simple example gives a&#xA;taste of protocol buffer reflection and its uses.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_4.&#34;&gt;Versions&lt;/h4&gt;&#xA;  &lt;p&gt;We call the original version of Go protocol buffers APIv1, and the&#xA;new one APIv2. Because APIv2 is not backwards compatible with APIv1,&#xA;we need to use different module paths for each.&lt;/p&gt;&#xA;&lt;p&gt;(These API versions are not the same as the versions of the protocol&#xA;buffer language: &lt;code&gt;proto1&lt;/code&gt;, &lt;code&gt;proto2&lt;/code&gt;, and &lt;code&gt;proto3&lt;/code&gt;. APIv1 and APIv2&#xA;are concrete implementations in Go that both support the &lt;code&gt;proto2&lt;/code&gt; and&#xA;&lt;code&gt;proto3&lt;/code&gt; language versions.)&lt;/p&gt;&#xA;&lt;p&gt;The&#xA;&lt;a href=&#34;https://pkg.go.dev/github.com/golang/protobuf?tab=overview&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;github.com/golang/protobuf&lt;/code&gt;&lt;/a&gt;&#xA;module is APIv1.&lt;/p&gt;&#xA;&lt;p&gt;The&#xA;&lt;a href=&#34;https://pkg.go.dev/google.golang.org/protobuf?tab=overview&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;google.golang.org/protobuf&lt;/code&gt;&lt;/a&gt;&#xA;module is APIv2. We have taken advantage of the need to change the&#xA;import path to switch to one that is not tied to a specific hosting&#xA;provider. (We considered &lt;code&gt;google.golang.org/protobuf/v2&lt;/code&gt;, to make it&#xA;clear that this is the second major version of the API, but settled on&#xA;the shorter path as being the better choice in the long term.)&lt;/p&gt;&#xA;&lt;p&gt;We know that not all users will move to a new major version of a package&#xA;at the same rate. Some will switch quickly; others may remain on the old&#xA;version indefinitely. Even within a single program, some parts may use&#xA;one API while others use another. It is essential, therefore, that we&#xA;continue to support programs that use APIv1.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;github.com/golang/protobuf@v1.3.4&lt;/code&gt; is the most recent pre-APIv2 version of APIv1.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;github.com/golang/protobuf@v1.4.0&lt;/code&gt; is a version of APIv1 implemented in terms of APIv2.&#xA;The API is the same, but the underlying implementation is backed by the new one.&#xA;This version contains functions to convert between the APIv1 and APIv2 &lt;code&gt;proto.Message&lt;/code&gt;&#xA;interfaces to ease the transition between the two.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;google.golang.org/protobuf@v1.20.0&lt;/code&gt; is APIv2.&#xA;This module depends upon &lt;code&gt;github.com/golang/protobuf@v1.4.0&lt;/code&gt;,&#xA;so any program which uses APIv2 will automatically pick a version of APIv1&#xA;which integrates with it.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;(Why start at version &lt;code&gt;v1.20.0&lt;/code&gt;? To provide clarity.&#xA;We do not anticipate APIv1 to ever reach &lt;code&gt;v1.20.0&lt;/code&gt;,&#xA;so the version number alone should be enough to unambiguously differentiate&#xA;between APIv1 and APIv2.)&lt;/p&gt;&#xA;&lt;p&gt;We intend to maintain support for APIv1 indefinitely.&lt;/p&gt;&#xA;&lt;p&gt;This organization ensures that any given program will use only a single&#xA;protocol buffer implementation, regardless of which API version it uses.&#xA;It permits programs to adopt the new API gradually, or not at all, while&#xA;still gaining the advantages of the new implementation. The principle of&#xA;minimum version selection means that programs may remain on the old&#xA;implementation until the maintainers choose to update to the new one&#xA;(either directly, or by updating a dependency).&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_5.&#34;&gt;Additional features of note&lt;/h4&gt;&#xA;  &lt;p&gt;The&#xA;&lt;a href=&#34;https://pkg.go.dev/google.golang.org/protobuf/encoding/protojson&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;google.golang.org/protobuf/encoding/protojson&lt;/code&gt;&lt;/a&gt;&#xA;package converts protocol buffer messages to and from JSON using the&#xA;&lt;a href=&#34;https://developers.google.com/protocol-buffers/docs/proto3#json&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;canonical JSON mapping&lt;/a&gt;,&#xA;and fixes a number of issues with the old &lt;code&gt;jsonpb&lt;/code&gt; package&#xA;that were difficult to change without causing problems for existing users.&lt;/p&gt;&#xA;&lt;p&gt;The&#xA;&lt;a href=&#34;https://pkg.go.dev/google.golang.org/protobuf/types/dynamicpb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;google.golang.org/protobuf/types/dynamicpb&lt;/code&gt;&lt;/a&gt;&#xA;package provides an implementation of &lt;code&gt;proto.Message&lt;/code&gt; for messages whose&#xA;protocol buffer type is derived at runtime.&lt;/p&gt;&#xA;&lt;p&gt;The&#xA;&lt;a href=&#34;https://pkg.go.dev/google.golang.org/protobuf/testing/protocmp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;google.golang.org/protobuf/testing/protocmp&lt;/code&gt;&lt;/a&gt;&#xA;package provides functions to compare protocol buffer messages with the&#xA;&lt;a href=&#34;https://pkg.go.dev/github.com/google/go-cmp/cmp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;github.com/google/cmp&lt;/code&gt;&lt;/a&gt;&#xA;package.&lt;/p&gt;&#xA;&lt;p&gt;The&#xA;&lt;a href=&#34;https://pkg.go.dev/google.golang.org/protobuf/compiler/protogen?tab=doc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;google.golang.org/protobuf/compiler/protogen&lt;/code&gt;&lt;/a&gt;&#xA;package provides support for writing protocol compiler plugins.&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;      &#xA;  &lt;h4 id=&#34;TOC_6.&#34;&gt;Conclusion&lt;/h4&gt;&#xA;  &lt;p&gt;The &lt;code&gt;google.golang.org/protobuf&lt;/code&gt; module is a major overhaul of&#xA;Go&#39;s support for protocol buffers, providing first-class support&#xA;for reflection, custom message implementations, and a cleaned up API&#xA;surface. We intend to maintain the previous API indefinitely as a wrapper&#xA;of the new one, allowing users to adopt the new API incrementally at&#xA;their own pace.&lt;/p&gt;&#xA;&lt;p&gt;Our goal in this update is to improve upon the benefits of the old&#xA;API while addressing its shortcomings. As we completed each component of&#xA;the new implementation, we put it into use within Google&#39;s codebase. This&#xA;incremental rollout has given us confidence in both the usability of the new&#xA;API and the performance and correctness of the new implementation. We believe&#xA;it is production ready.&lt;/p&gt;&#xA;&lt;p&gt;We are excited about this release and hope that it will serve the Go&#xA;ecosystem for the next ten years and beyond!&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;  &#xA;</content></entry><entry><title>Go 1.14 is released</title><id>tag:blog.golang.org,2013:blog.golang.org/go1.14</id><link rel="alternate" href="https://blog.golang.org/go1.14"></link><published>2020-02-25T11:00:00+00:00</published><updated>2020-02-25T11:00:00+00:00</updated><author><name>Alex Rakoczy</name></author><summary type="html"></summary><content type="html">&#xA;  &#xA;  &#xA;    &#xA;      &#xA;        &lt;p&gt;Today the Go team is very happy to announce the release of Go 1.14. You can get it from the &lt;a href=&#34;https://golang.org/dl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;download page&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Some of the highlights include:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Module support in the &lt;code&gt;go&lt;/code&gt; command is now ready for production use. We encourage all users to &lt;a href=&#34;https://golang.org/doc/go1.14#introduction&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;migrate to &lt;code&gt;go&lt;/code&gt; modules for dependency management&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/go1.14#language&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Embedding interfaces with overlapping method sets&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/go1.14#runtime&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Improved defer performance&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/go1.14#runtime&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Goroutines are asynchronously preemptible&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/go1.14#runtime&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The page allocator is more efficient&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/go1.14#runtime&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Internal timers are more efficient&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For the complete list of changes and more information about the improvements above, see the &lt;a href=&#34;https://golang.org/doc/go1.14&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Go 1.14 release notes&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;We want to thank everyone who contributed to this release by writing code, filing bugs, providing feedback, and/or testing the beta and release candidate.&#xA;Your contributions and diligence helped to ensure that Go 1.14 is as stable as possible.&#xA;That said, if you notice any problems, please &lt;a href=&#34;https://golang.org/issue/new&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;We hope you enjoy the new release!&lt;/p&gt;&#xA;&#xA;      &#xA;    &#xA;  &#xA;</content></entry></feed>